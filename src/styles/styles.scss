@use 'sass:map';

@import '@fontsource/literata/index.css';
@import '@fontsource/literata/400-italic.css';
@import '@fontsource/literata/400.css';
@import '@fontsource/literata/900.css';
@import '@fontsource/red-hat-display/index.css';
@import '@fontsource/red-hat-display/400.css';
@import '@fontsource/red-hat-display/900.css';

// --- settings ---
$base-size: 1rem;

$size-scale: (
	'300': $base-size * 0.75,
	'400': $base-size,
	'500': $base-size * 1.33,
	'600': $base-size * 1.77,
);

$color: (
	'light-light': #fff6d7,
	'light': #f9f4e3,
	'light-dark': #fdfbf3,
	'dark-light': #505c73,
	'dark': #38445b,
	'dark-dark': #263147,
  'quaternary-light': #fe9476,
  'quaternary': #ff7f5c,
  'quaternary-dark': #f96841,
  'quinary-light': #f26c7f,
  'quinary': #fa576e,
  'quinary-dark': #fc3e59,
);

$breakpoint-target: (
	'md': '(min-width: 37em)',
);

@function from-map($ref, $map-name, $key-name, $default-value, $key) {
	$result: map.get($ref, $key);
	@if ($result) {
		@return $result;
	}

	@warn #{$key-name + ' "' + $key + '" not found in ' + $map-name};

	@return $default-value;
}

@function from-size($key) {
	@return from-map($size-scale, '$size-scale', 'Size', $base-size, $key);
}

@function from-color($key) {
	@return from-map($color, '$color', 'Color', null, $key);
}


// --- mixins ---

@mixin at-breakpoint($key) {
	$target: map.get($breakpoint-target, $key);

	@if $target {
    @media #{ $target } {
      @content;
    }	
	} @else {
		@warn #{ 'Breakpoint, ‘' + $key + '’ not found in `$breakpoint-target`.' };
	}
}

@mixin font-base {
	font-family: Literata, Georgia, serif;
}

@mixin font-sans {
	font-family: 'Red Hat Display', 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; 
}

@mixin weight-bold {
	font-weight: 900
}

// placeholder hack
// https://csswizardry.com/2014/01/extending-silent-classes-in-sass//
// --- silent-classes ---

.radius, 
%radius {
  border-radius: 0.25rem;
}

.visually-hidden, 
%visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/* --- reset --- */

/* Box sizing rules */
*,
::after,
::before {
	box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
ul[class],
ol[class],
figure,
blockquote,
dl,
dd {
	margin: 0;
}

/* Set core root defaults */
html {
	scroll-behavior: smooth;
}

/* Set core body defaults */
body {
	min-height: 100vh;
	text-rendering: optimizeSpeed;
	line-height: 1.5;
}

/* Remove default padding */
/* Remove list styles on ul, ol elements with a class attribute */
ul[class],
ol[class] {
  padding: 0;
  list-style: none;
}

/* --- critical --- */

/* --- global (lesson 22) --- */

:root {
	--flow-space: #{from-size('600')};
}

body {
	background: from-color('light');
	color: from-color('dark-dark');
	font-size: from-size('500');
	@include font-base;
}

a:not([class]) {
  text-decoration-skip-ink: auto;
  color: currentColor;
  text-decoration-color: from-color('quinary');
}

// High contrast selection because it can help visually-impaired
// folks read the text easier
::selection {
  color: from-color('light');

  // We set this as an RGBA because that’s how you get a solid color, by using 0.99
  // alpha value. Browsers are wild.
  background: rgba(from-color('dark-dark'), 0.99);
}

/* --- blocks --- */

.site-head {
	padding: from-size('600') 0;

  &__inner {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
  }

	&__brand {
    flex-shrink: 0;
    margin-inline-end: from-size('600'); // Prevents nav bunching up to the logo

    // Optical adjustment to account for the offset the sunken 3s create
    transform: translateY(0.25rem);

    svg {
      width: 100px;
    }
  }

  &__nav {
    padding: from-size('300') 0;
  }	

	@include at-breakpoint('md') {
    &__brand {
      svg {
        width: 160px;
      }
    }	
	}
}

.nav {
  line-height: 1;
  font-weight: 900;
  margin-top: -#{from-size('400')};
  margin-inline-start: -#{from-size('400')};

  &__list {
    display: flex;
    flex-wrap: wrap;

    > * {
      padding-top: from-size('400');
      padding-inline-start: from-size('400');
    }
  }

  a {
    text-decoration: none;
    display: block;
    position: relative;

    // Adds the fake border to active state items
    &[data-state='active'],
    &[aria-current='page'] {
      &:before {
        content: '';
        display: block;
        width: 100%;
        height: 0.25rem;
        position: absolute;
        top: 100%;
        left: 0;
        margin-top: 0.25rem;
        background: from-color('quinary-dark');
      }
    }
  }
}

// lesson 24
.button {
  @extend %radius;

  display: inline-block;
  padding: 0.5rem 2rem;
  background: from-color('quaternary-light');
  color: from-color('dark-dark');
  border: 2px solid;
  text-transform: uppercase;
  text-decoration: none;
  text-align: center;
	@include font-sans;
	@include weight-bold;

	// Make sure hover state trumps all variants with a good ol’ important
  &:hover {
    background: from-color('quaternary') !important;
    color: from-color('dark-dark') !important;
  }

  // Add a ghost modifier
  &[data-variant='ghost'] {
    background: transparent;
    color: get-color('quaternary-light');
  }
}

.skip-link {
	position: absolute;
	top: from-size('400');
	left: from-size('400');
	z-index: 99;

	&:not(:focus) {
		@extend %visually-hidden;
	}
}


/* --- utilities --- */
.font-sans {
	@include font-sans;
}

.wrapper {
  max-width: 70rem;
  padding: 0 from-size('500');
  margin-left: auto;
  margin-right: auto;
  position: relative;
}
