@use 'sass:map';

// --- settings ---
$base-size: 1rem;

$size-scale: (
	'300': $base-size * 0.75,
	'400': $base-size,
	'500': $base-size * 1.33,
	'600': $base-size * 1.77,
	'700': $base-size * 2.36,
	'800': $base-size * 3.15,
	'900': $base-size * 4.2,
	'major': $base-size * 5.6,
);

$color: (
	'light-light': #fdfbf3,
	'light': #f9f4e3,
	'light-dark': #fff6d7,
	'dark-light': #505c73,
	'dark': #38445b,
	'dark-dark': #263147,
	'primary-light': #654ac9,
	'primary': #513aa6,
	'primary-dark': #432e92,
	'secondary-light': #98e2d8,
	'secondary': #6ac2b6,
	'secondary-dark': #35a495,
	'tertiary-light': #ffdeaa,
	'tertiary': #ffd490,
	'tertiary-dark': #ffca77,
	'quaternary-light': #fe9476,
	'quaternary': #ff7f5c,
	'quaternary-dark': #f96841,
	'quinary-light': #f26c7f,
	'quinary': #fa576e,
	'quinary-dark': #fc3e59,
);

$breakpoint-target: (
	'md': '(min-width: 37em)',
	'lg': '(min-width: 62em)',
);

$measure-value: (
	'micro': 10ch,
	'compact': 30ch,
	'short': 40ch,
	'long': 65ch,
);

@function from-map($ref, $map-name, $key-name, $default-value, $key) {
	$result: map.get($ref, $key);
	@if ($result) {
		@return $result;
	}

	@warn #{$key-name + ' "' + $key + '" not found in ' + $map-name};

	@return $default-value;
}

@function from-size($key) {
	@return from-map($size-scale, '$size-scale', 'Size', $base-size, $key);
}

@function from-color($key) {
	@return from-map($color, '$color', 'Color', null, $key);
}

@function from-measure($key) {
	@return from-map($measure-value, '$measure-value', 'Measure', null, $key);
}

// --- mixins ---

@mixin font-base {
	font-family: Literata, Georgia, serif;
}

@mixin font-sans {
	font-family: 'Red Hat Display', 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
		sans-serif;
}

@mixin weight-normal {
	font-weight: 400;
}

@mixin weight-bold {
	font-weight: 900;
}

@mixin leading-flat {
	line-height: 1.1;
}

@mixin leading-tight {
	line-height: 1.3;
}

@mixin leading-loose {
	line-height: 1.7;
}

@mixin color-light {
	color: from-color('light');
}

@mixin color-secondary-light {
	color: from-color('secondary-light');
}

@mixin color-quinary-dark {
	color: from-color('quinary-dark');
}

@mixin color-quinary {
	color: from-color('quinary');
}

@mixin bg-light-light {
	background: from-color('light-light');
}

@mixin bg-dark-dark {
	background: from-color('dark-dark');
}

@mixin bg-primary-dark {
	background: from-color('primary-dark');
}

@mixin bg-secondary-light {
	background: from-color('secondary-light');
}

@mixin bg-tertiary-light {
	background: from-color('tertiary-light');
}

@mixin flow-space-300 {
	--flow-space: #{from-size('300')};
}

@mixin flow-space-700 {
	--flow-space: #{from-size('700')};
}

@mixin flow-space-800 {
	--flow-space: #{from-size('800')};
}

@mixin at-breakpoint($key) {
	$target: map.get($breakpoint-target, $key);

	@if $target {
		@media #{ $target } {
			@content;
		}
	} @else {
		@warn #{ 'Breakpoint, ‘' + $key + '’ not found in `$breakpoint-target`.' };
	}
}

@mixin define-font-size($name, $size) {
	.#{$name} {
		font-size: $size;
	}
}

@mixin text-size($size-key, $bp-key: null) {
	$size: from-size($size-key);
	$name: 'text-' + $size-key;
	@if $bp-key {
		$target: map.get($breakpoint-target, $bp-key);
		@media #{$target} {
			@include define-font-size($bp-key + '\\:' + $name, $size);
		}
	} @else {
		@include define-font-size($name, $size);
	}
}

@mixin measure-list($key) {
	$width: from-measure($key);
	max-width: $width;
}

@mixin define-measure($name, $width-key) {
	.#{$name} {
		@include measure-list($width-key);
	}
}

@mixin measure-width($width-key, $bp-key: null) {
	$name: 'measure-' + $width-key;
	@if $bp-key {
		$target: map.get($breakpoint-target, $bp-key);
		@media #{$target} {
			@include define-measure($bp-key + '\\:' + $name, $width-key);
		}
	} @else {
		@include define-measure($name, $width-key);
	}
}

@mixin define-gap-top-size($name, $size) {
	.#{$name} {
		margin-top: $size;
	}
}

@mixin gap-top-size($size-key, $bp-key: null) {
	$size: from-size($size-key);
	$name: 'gap-top-' + $size-key;
	@if $bp-key {
		$target: map.get($breakpoint-target, $bp-key);
		@media #{$target} {
			@include define-gap-top-size($bp-key + '\\:' + $name, $size);
		}
	} @else {
		@include define-gap-top-size($name, $size);
	}
}

/* --- utilities --- */

.bg-dark-dark {
	@include bg-dark-dark;
}

.bg-light-light {
	@include bg-light-light;
}

.bg-primary-dark {
	@include bg-primary-dark;
}

.bg-secondary-light {
	@include bg-secondary-light;
}

.bg-tertiary-light {
	@include bg-tertiary-light;
}

.color-light {
	@include color-light;
}

.color-secondary-light {
	@include color-secondary-light;
}

.color-quinary-dark {
	@include color-quinary-dark;
}

.color-quinary {
	@include color-quinary;
}

.flow-space-300 {
	@include flow-space-300;
}

.flow-space-700 {
	@include flow-space-700;
}

.flow-space-800 {
	@include flow-space-800;
}

.font-sans {
	@include font-sans;
}

@include gap-top-size('700');

.leading-flat {
	@include leading-flat;
}

.leading-tight {
	@include leading-tight;
}

@include measure-width('micro');
@include measure-width('micro', 'lg');
@include measure-width('short');
@include measure-width('compact');
@include measure-width('long');

@include text-size('400');
@include text-size('600');
@include text-size('700');
@include text-size('800');

.weight-normal {
	@include weight-normal;
}

.weight-bold {
	@include weight-bold;
}

@include text-size('600', 'md');
@include text-size('900', 'md');

@include text-size('700', 'lg');
@include text-size('800', 'lg');
@include text-size('major', 'lg');

/* --- reset --- */

/* Box sizing rules */
*,
::after,
::before {
	box-sizing: border-box;
}

/* Remove default padding */
/* Remove list styles on ul, ol elements with a class attribute */
ul[class],
ol[class] {
	padding: 0;
	list-style: none;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
ul[class],
ol[class],
figure,
blockquote,
dl,
dd {
	margin: 0;
}

/* Set core root defaults */
html {
	scroll-behavior: smooth;
}

a:not([class]) {
	text-decoration-skip-ink: auto;
	color: currentColor;
	text-decoration-color: from-color('quinary');
}

/* Make images easier to work with */
img {
	max-width: 100%;
	height: auto;
	display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
	font: inherit;
}

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
	* {
		animation-duration: 0.01s !important;
		animation-iteration-count: 1 !important;
		transition-duration: 0.01s !important;
		scroll-behavior: auto !important;
	}
}

:root {
	--flow-space: #{from-size('600')};
}

/* Set core body defaults */
body {
	min-height: 100vh;
	text-rendering: optimizeSpeed;
	line-height: 1.5;
	background: from-color('light');
	color: from-color('dark-dark');
	font-size: from-size('500');
	@include font-base;
}

:focus {
	outline: 2px dashed from-color('primary');
	outline-offset: 0.25rem;
}

main:focus {
	outline: none;
}

h1,
h2,
h3,
h4 {
	font-weight: 900;

	@include font-sans;
	@include leading-flat;
}

// High contrast selection because it can help visually-impaired
// folks read the text easier
::selection {
	color: from-color('light');

	// We set this as an RGBA because that’s how you get a solid color, by using 0.99
	// alpha value. Browsers are wild.
	background: rgba(from-color('dark-dark'), 0.99);
}

// Scrollbar styles
::-webkit-scrollbar {
	height: 1rem;
}

::-webkit-scrollbar-track {
	background-color: transparent;
	border: 1px solid from-color('dark-light');
	border-radius: 0.25rem;
}

::-webkit-scrollbar-thumb {
	background-color: from-color('dark');
	border-radius: 0.25rem;
}

// Restore responsiveness after adding width/height on `img` element
.img--sharp {
	width: auto;
	height: auto;
}

/* --- blocks --- */

// lesson 24
.button {
	@extend %radius;

	display: inline-block;
	padding: 0.5rem 2rem;
	background: from-color('quaternary-light');
	color: from-color('dark-dark');
	border: 2px solid;
	text-transform: uppercase;
	text-decoration: none;
	text-align: center;
	@include font-sans;
	@include weight-bold;

	// Make sure hover state trumps all variants with a good ol’ important
	&:hover {
		background: from-color('quaternary') !important;
		color: from-color('dark-dark') !important;
	}

	// Add a ghost modifier
	&[data-variant='ghost'] {
		background: transparent;
		color: from-color('quaternary-light');
	}
}

.gallery {
	display: flex;
	flex-direction: column;

	&__media {
		max-width: 40rem;
	}

	// Indents the even children along the inline-start to achieve a staggered
	// layout where space permits
	@include at-breakpoint('md') {
		&__item {
			&:nth-child(even) {
				margin-inline-start: auto;
			}
		}
	}

	// Flip each item to be a flex item to align caption and
	// image together
	@include at-breakpoint('lg') {
		&__item {
			$gallery-item-space: from-size('700');
			display: flex;
			align-items: flex-end;

			// Flips the horizontal layout. Use this with care though,
			// because changing source order can be problemetic
			// for keyboard users
			&:nth-child(odd) {
				flex-direction: row-reverse;
			}

			// A specificity trump that makes sure that each item
			// has a neg start margin
			&:nth-child(odd),
			&:nth-child(even) {
				margin-inline-start: -$gallery-item-space;
			}

			> * {
				margin-inline-start: $gallery-item-space;
			}
		}
	}
}

.tags-list {
	display: flex;
	flex-wrap: wrap;
	align-items: flex-start;

	&[class] {
		margin-inline-start: -#{from-size('400')};
	}

	> * {
		padding-top: from-size('400');
		padding-inline-start: from-size('400');
	}
}

.page-content {
	@include leading-loose;

	> * {
		@include measure-list('long');
	}

	blockquote {
		border-inline-start: 1rem solid from-color('quinary');
		padding-inline-start: from-size('600');
		padding-top: from-size('500');
		padding-bottom: from-size('500');
		font-style: italic;
	}

	h2 {
		font-size: from-size('700');
	}

	h3 {
		font-size: from-size('600');
	}

	ol,
	ul {
		padding-inline-start: from-size('800');
	}

	li + li {
		margin-top: from-size('300');
	}

	// Add a greater flow space for heading elements so
	// they appear more like article sections
	h2,
	h3 {
		--flow-space: #{from-size('800')};
	}

	// Add tighter flow for elements that follow a heading
	h2 + *,
	h3 + * {
		--flow-space: #{from-size('300')};
	}
}

.nav {
	line-height: 1;
	font-weight: 900;
	margin-top: -#{from-size('400')};
	margin-inline-start: -#{from-size('400')};

	&__list {
		display: flex;
		flex-wrap: wrap;

		> * {
			padding-top: from-size('400');
			padding-inline-start: from-size('400');
		}
	}

	a {
		text-decoration: none;
		display: block;
		position: relative;

		// Adds the fake border to active state items
		&[data-state='active'],
		&[aria-current='page'] {
			&:before {
				content: '';
				display: block;
				width: 100%;
				height: 0.25rem;
				position: absolute;
				top: 100%;
				left: 0;
				margin-top: 0.25rem;
				background: from-color('quinary-dark');
			}
		}
	}
}

/* --- More utilities --- */
/*
  AUTO GRID
  Set the minimum item size with `--auto-grid-min-size` and you’ll
  get a fully responsive grid with no media queries.

  https://piccalil.lihttps://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
*/
.auto-grid {
	display: grid;
	grid-template-columns: repeat(
		auto-fill,
		minmax(var(--auto-grid-min-size, 16rem), 1fr)
	);
	grid-gap: var(--auto-grid-gap, get-size('500'));
}

.dot-shadow {
	--dot-shadow-size: 0.75rem;
	position: relative;

	&::before {
		@extend %radius;

		content: '';
		display: block;
		width: calc(100% + calc(var(--dot-shadow-size) * 2));
		height: calc(100% + calc(var(--dot-shadow-size) * 2));
		background-image: url("data:image/svg+xml,%3Csvg width='6px' height='6px' viewBox='0 0 6 6' version='1.1' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle fill='%23CAC6B8' cx='1' cy='5' r='1'%3E%3C/circle%3E%3Ccircle fill='%23CAC6B8' cx='4' cy='2' r='1'%3E%3C/circle%3E%3C/svg%3E%0A");
		position: absolute;
		top: calc(var(--dot-shadow-size) * -1);
		left: calc(var(--dot-shadow-size) * -1);
		z-index: -1;
	}
}

/**
 * FLOW
 * Applies a margin to sibling elements based on a --flow-space custom property.
 */
.flow > * + * {
	margin-top: var(--flow-space, from-size('600'));
}

.frame {
	position: relative;

	&::before {
		@extend %radius;

		content: '';
		pointer-events: none;
		width: 100%;
		height: 100%;
		position: absolute;
		top: -0.25rem;
		left: -0.25rem;
		border: 0.125rem solid from-color('dark');
		z-index: 1;

		@include at-breakpoint('md') {
			top: -0.5rem;
			left: -0.5rem;
			border-width: 0.25rem;
		}
	}

	// For each color, create a variant
	@each $frame-color in ('primary', 'secondary', 'quaternary', 'quinary') {
		&[data-frame='#{$frame-color}'] {
			&::before {
				border-color: from-color($frame-color);
			}
		}
	}
}

/* --- objects? --- */

.headline {
	font-size: from-size('700');
	max-width: 18ch;

	@include at-breakpoint('md') {
		font-size: from-size('800');
	}

	@include at-breakpoint('lg') {
		font-size: from-size('900');
	}

	&::after {
		content: '.';
	}

	// For each color, create an exception
	@each $headline-highlight
		in ('dark', 'primary', 'secondary', 'quaternary', 'quinary')
	{
		&[data-highlight='#{$headline-highlight}'] {
			&::after {
				color: from-color($headline-highlight);
			}
		}
	}
}

// Adds consitent space and padding for each full panel section
.panel {
	margin: from-size('700') 0;
	padding: from-size('700') 0;

	@include at-breakpoint('md') {
		margin: from-size('800') 0;
		padding: from-size('800') 0;
	}
}

// --- silent-classes (extend targets) ---
// placeholder hack
// https://csswizardry.com/2014/01/extending-silent-classes-in-sass
//

.radius,
%radius {
	border-radius: 0.25rem;
}

.visually-hidden,
%visually-hidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: auto;
	margin: 0;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

/* --- More utilities --- */

.wrapper {
	max-width: 70rem;
	padding: 0 from-size('500');
	margin-left: auto;
	margin-right: auto;
	position: relative;
}

/* --- blocks --- */

.intro {
	// Default is a single column layout where the header overlaps the media
	display: grid;
	grid-template-rows: from-size('700') minmax(0, 1fr) from-size('700') auto;
	gap: from-size('500');

	// Force items to span 1 column
	> * {
		grid-column: 1;
	}

	&__header {
		padding: from-size('300') from-size('500');
		background: rgba(from-color('tertiary'), 0.95);
		z-index: 1;
		grid-row: 2;
		margin: 0 from-size('500'); // Adds a horizontal gutter

		// Prevents it from stretching to fill the space
		align-self: center;
	}

	&__heading {
		em {
			font-style: normal;
			display: block;

			// The weight change creates a weird indent, so this
			// optical adjustment fixes it
			transform: translateX(-3px);
		}
	}

	&__media {
		grid-row: 1/4;
		position: relative;

		img {
			width: 100%;
			height: 100%;
			object-fit: cover;
		}
	}

	&__content {
		grid-row: 4;

		p {
			max-width: 30ch;
		}
	}

	// Switch to an inline layout with some vert space
	// above the header and content
	@include at-breakpoint('md') {
		grid-template-rows: from-size('500') auto auto auto;
		grid-template-columns: minmax(15rem, 1fr) 2fr;

		&__header {
			padding: from-size('500');
			margin: 0;
			grid-column: 1/3;
			justify-self: start;
			align-self: end;
		}

		&__media {
			grid-column: 3/2;
			grid-row: 1/5;
		}

		&__content {
			grid-row: 3/4;
			grid-column: 1;
		}
	}

	// Flip the ratio for larger breakpoints
	@include at-breakpoint('lg') {
		grid-template-columns: 1fr minmax(44rem, 1fr);

		// Because it's so large, it make sense to limit the image height too
		&__media {
			height: 28rem;
		}
	}
}

.featured-work {
	&__item {
		display: block;
	}

	&__action {
		text-align: center;
	}

	@include at-breakpoint('md') {
		&__inner {
			display: grid;
			grid-template-columns: repeat(12, 1fr);
			grid-gap: from-size('700') from-size('500');

			@supports (display: grid) {
				> * {
					margin: 0;
				}
			}
		}

		&__intro {
			grid-column: 1/13;
			align-self: end;
		}

		&__item {
			&:nth-child(odd) {
				grid-column: 1/8;
			}

			&:nth-child(even) {
				grid-column: 13/6;
			}
		}
	}

	@include at-breakpoint('lg') {
		grid-template-columns: repeat(2, 1fr);

		&__intro,
		&__item {
			&:nth-child(odd) {
				grid-column: 1/7;
			}

			&:nth-child(even) {
				grid-column: 13/7;
			}
		}
	}
}

.studio-feed {
	&__list {
		display: flex;
		overflow-x: auto;
		-webkit-overflow-scrolling: touch;

		> * {
			width: 16rem;
			height: 13rem;
			flex-shrink: 0;
			padding: 0 0 from-size('400') 0;

			img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
		}

		> * + * {
			margin-inline-start: from-size('500');
		}
	}

	@include at-breakpoint('md') {
		&__list {
			> * {
				width: 28rem;
				height: 17rem;
			}
		}
	}
}

time[datetime] {
	display: block;
	color: from-color('primary-dark');
	font-size: from-size('700');
	font-style: italic;
}

.pagination {
	&__inner {
		display: flex;
		justify-content: space-between;
		flex-wrap: wrap;
	}

	// Pushes a sole "next" link out to the right
	&__inner > [data-direction='forwards'] {
		margin-inline-start: auto;
	}
}

.post-list {
	&__link {
		font-size: from-size('700');
		color: from-color('dark-dark');
		text-decoration-color: from-color('primary-dark');

		@include font-sans;
		@include weight-bold;

		&:hover {
			color: from-color('primary-dark');
			text-decoration-color: from-color('dark-dark');
		}
	}
}

.hero {
	position: relative;
	padding: 50vh 0 from-size('800') 0;

	&__image {
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
		object-fit: cover;
	}

	&__inner {
		position: relative;
		z-index: 1;
	}

	&__content {
		display: inline-block;
		padding: from-size('500');
	}
}

.key-facts {
	--auto-grid-gap: #{from-size('800') from-size('500')};

	li > * {
		display: block;
	}
}
